{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "95d854bb",
   "metadata": {
    "papermill": {
     "duration": 0.013207,
     "end_time": "2024-09-09T20:40:32.146045",
     "exception": false,
     "start_time": "2024-09-09T20:40:32.132838",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Environment Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "65eb8965",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:40:32.172990Z",
     "iopub.status.busy": "2024-09-09T20:40:32.172176Z",
     "iopub.status.idle": "2024-09-09T20:40:51.105942Z",
     "shell.execute_reply": "2024-09-09T20:40:51.104676Z"
    },
    "papermill": {
     "duration": 18.950189,
     "end_time": "2024-09-09T20:40:51.108617",
     "exception": false,
     "start_time": "2024-09-09T20:40:32.158428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "! pip install -Uqq fastbook waterfallcharts treeinterpreter dtreeviz==1.4.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9209202e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:40:51.136062Z",
     "iopub.status.busy": "2024-09-09T20:40:51.135119Z",
     "iopub.status.idle": "2024-09-09T20:40:51.140098Z",
     "shell.execute_reply": "2024-09-09T20:40:51.139211Z"
    },
    "papermill": {
     "duration": 0.021,
     "end_time": "2024-09-09T20:40:51.142182",
     "exception": false,
     "start_time": "2024-09-09T20:40:51.121182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3c69827b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:40:51.168316Z",
     "iopub.status.busy": "2024-09-09T20:40:51.167937Z",
     "iopub.status.idle": "2024-09-09T20:40:59.040885Z",
     "shell.execute_reply": "2024-09-09T20:40:59.040016Z"
    },
    "papermill": {
     "duration": 7.88884,
     "end_time": "2024-09-09T20:40:59.043457",
     "exception": false,
     "start_time": "2024-09-09T20:40:51.154617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy\n",
    "import pandas\n",
    "import fastbook\n",
    "from pandas.api.types import is_string_dtype, is_numeric_dtype, is_categorical_dtype\n",
    "from fastai.tabular.all import *\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from dtreeviz.trees import *\n",
    "from treeinterpreter import treeinterpreter\n",
    "fastbook.setup_book()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8b549ab",
   "metadata": {
    "papermill": {
     "duration": 0.012387,
     "end_time": "2024-09-09T20:40:59.068458",
     "exception": false,
     "start_time": "2024-09-09T20:40:59.056071",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Import & Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fc09bcc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:40:59.094675Z",
     "iopub.status.busy": "2024-09-09T20:40:59.094031Z",
     "iopub.status.idle": "2024-09-09T20:40:59.100883Z",
     "shell.execute_reply": "2024-09-09T20:40:59.099753Z"
    },
    "papermill": {
     "duration": 0.022382,
     "end_time": "2024-09-09T20:40:59.102981",
     "exception": false,
     "start_time": "2024-09-09T20:40:59.080599",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/data_description.txt\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/train.csv\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/test.csv\n"
     ]
    }
   ],
   "source": [
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b80b1918",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:40:59.129410Z",
     "iopub.status.busy": "2024-09-09T20:40:59.128583Z",
     "iopub.status.idle": "2024-09-09T20:40:59.168765Z",
     "shell.execute_reply": "2024-09-09T20:40:59.167696Z"
    },
    "papermill": {
     "duration": 0.055689,
     "end_time": "2024-09-09T20:40:59.171022",
     "exception": false,
     "start_time": "2024-09-09T20:40:59.115333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df Shape:  (1460, 81)\n",
      "Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n",
      "       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n",
      "       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n",
      "       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n",
      "       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n",
      "       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n",
      "       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n",
      "       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n",
      "       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n",
      "       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n",
      "       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n",
      "       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n",
      "       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n",
      "       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n",
      "       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n",
      "       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n",
      "       'SaleCondition', 'SalePrice'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "df_raw = pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/train.csv\")\n",
    "print(\"df Shape: \",df_raw.shape)\n",
    "print(df_raw.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c27c4254",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:40:59.197941Z",
     "iopub.status.busy": "2024-09-09T20:40:59.197257Z",
     "iopub.status.idle": "2024-09-09T20:40:59.305085Z",
     "shell.execute_reply": "2024-09-09T20:40:59.303954Z"
    },
    "papermill": {
     "duration": 0.123636,
     "end_time": "2024-09-09T20:40:59.307383",
     "exception": false,
     "start_time": "2024-09-09T20:40:59.183747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>BsmtUnfSF</th>\n",
       "      <th>TotalBsmtSF</th>\n",
       "      <th>1stFlrSF</th>\n",
       "      <th>2ndFlrSF</th>\n",
       "      <th>LowQualFinSF</th>\n",
       "      <th>GrLivArea</th>\n",
       "      <th>BsmtFullBath</th>\n",
       "      <th>BsmtHalfBath</th>\n",
       "      <th>FullBath</th>\n",
       "      <th>HalfBath</th>\n",
       "      <th>BedroomAbvGr</th>\n",
       "      <th>KitchenAbvGr</th>\n",
       "      <th>TotRmsAbvGrd</th>\n",
       "      <th>Fireplaces</th>\n",
       "      <th>GarageYrBlt</th>\n",
       "      <th>GarageCars</th>\n",
       "      <th>GarageArea</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1201.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1452.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1379.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>730.500000</td>\n",
       "      <td>56.897260</td>\n",
       "      <td>70.049958</td>\n",
       "      <td>10516.828082</td>\n",
       "      <td>6.099315</td>\n",
       "      <td>5.575342</td>\n",
       "      <td>1971.267808</td>\n",
       "      <td>1984.865753</td>\n",
       "      <td>103.685262</td>\n",
       "      <td>443.639726</td>\n",
       "      <td>46.549315</td>\n",
       "      <td>567.240411</td>\n",
       "      <td>1057.429452</td>\n",
       "      <td>1162.626712</td>\n",
       "      <td>346.992466</td>\n",
       "      <td>5.844521</td>\n",
       "      <td>1515.463699</td>\n",
       "      <td>0.425342</td>\n",
       "      <td>0.057534</td>\n",
       "      <td>1.565068</td>\n",
       "      <td>0.382877</td>\n",
       "      <td>2.866438</td>\n",
       "      <td>1.046575</td>\n",
       "      <td>6.517808</td>\n",
       "      <td>0.613014</td>\n",
       "      <td>1978.506164</td>\n",
       "      <td>1.767123</td>\n",
       "      <td>472.980137</td>\n",
       "      <td>94.244521</td>\n",
       "      <td>46.660274</td>\n",
       "      <td>21.954110</td>\n",
       "      <td>3.409589</td>\n",
       "      <td>15.060959</td>\n",
       "      <td>2.758904</td>\n",
       "      <td>43.489041</td>\n",
       "      <td>6.321918</td>\n",
       "      <td>2007.815753</td>\n",
       "      <td>180921.195890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>421.610009</td>\n",
       "      <td>42.300571</td>\n",
       "      <td>24.284752</td>\n",
       "      <td>9981.264932</td>\n",
       "      <td>1.382997</td>\n",
       "      <td>1.112799</td>\n",
       "      <td>30.202904</td>\n",
       "      <td>20.645407</td>\n",
       "      <td>181.066207</td>\n",
       "      <td>456.098091</td>\n",
       "      <td>161.319273</td>\n",
       "      <td>441.866955</td>\n",
       "      <td>438.705324</td>\n",
       "      <td>386.587738</td>\n",
       "      <td>436.528436</td>\n",
       "      <td>48.623081</td>\n",
       "      <td>525.480383</td>\n",
       "      <td>0.518911</td>\n",
       "      <td>0.238753</td>\n",
       "      <td>0.550916</td>\n",
       "      <td>0.502885</td>\n",
       "      <td>0.815778</td>\n",
       "      <td>0.220338</td>\n",
       "      <td>1.625393</td>\n",
       "      <td>0.644666</td>\n",
       "      <td>24.689725</td>\n",
       "      <td>0.747315</td>\n",
       "      <td>213.804841</td>\n",
       "      <td>125.338794</td>\n",
       "      <td>66.256028</td>\n",
       "      <td>61.119149</td>\n",
       "      <td>29.317331</td>\n",
       "      <td>55.757415</td>\n",
       "      <td>40.177307</td>\n",
       "      <td>496.123024</td>\n",
       "      <td>2.703626</td>\n",
       "      <td>1.328095</td>\n",
       "      <td>79442.502883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>1300.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1872.000000</td>\n",
       "      <td>1950.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>334.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>334.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1900.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2006.000000</td>\n",
       "      <td>34900.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>365.750000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>7553.500000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1954.000000</td>\n",
       "      <td>1967.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>223.000000</td>\n",
       "      <td>795.750000</td>\n",
       "      <td>882.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1129.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1961.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>334.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>2007.000000</td>\n",
       "      <td>129975.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>730.500000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>9478.500000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1973.000000</td>\n",
       "      <td>1994.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>383.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>477.500000</td>\n",
       "      <td>991.500000</td>\n",
       "      <td>1087.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1464.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1980.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>480.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>163000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1095.250000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>11601.500000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2004.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>712.250000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>808.000000</td>\n",
       "      <td>1298.250000</td>\n",
       "      <td>1391.250000</td>\n",
       "      <td>728.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1776.750000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2002.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>576.000000</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>214000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1460.000000</td>\n",
       "      <td>190.000000</td>\n",
       "      <td>313.000000</td>\n",
       "      <td>215245.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>1600.000000</td>\n",
       "      <td>5644.000000</td>\n",
       "      <td>1474.000000</td>\n",
       "      <td>2336.000000</td>\n",
       "      <td>6110.000000</td>\n",
       "      <td>4692.000000</td>\n",
       "      <td>2065.000000</td>\n",
       "      <td>572.000000</td>\n",
       "      <td>5642.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1418.000000</td>\n",
       "      <td>857.000000</td>\n",
       "      <td>547.000000</td>\n",
       "      <td>552.000000</td>\n",
       "      <td>508.000000</td>\n",
       "      <td>480.000000</td>\n",
       "      <td>738.000000</td>\n",
       "      <td>15500.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>755000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Id   MSSubClass  LotFrontage        LotArea  OverallQual  \\\n",
       "count  1460.000000  1460.000000  1201.000000    1460.000000  1460.000000   \n",
       "mean    730.500000    56.897260    70.049958   10516.828082     6.099315   \n",
       "std     421.610009    42.300571    24.284752    9981.264932     1.382997   \n",
       "min       1.000000    20.000000    21.000000    1300.000000     1.000000   \n",
       "25%     365.750000    20.000000    59.000000    7553.500000     5.000000   \n",
       "50%     730.500000    50.000000    69.000000    9478.500000     6.000000   \n",
       "75%    1095.250000    70.000000    80.000000   11601.500000     7.000000   \n",
       "max    1460.000000   190.000000   313.000000  215245.000000    10.000000   \n",
       "\n",
       "       OverallCond    YearBuilt  YearRemodAdd   MasVnrArea   BsmtFinSF1  \\\n",
       "count  1460.000000  1460.000000   1460.000000  1452.000000  1460.000000   \n",
       "mean      5.575342  1971.267808   1984.865753   103.685262   443.639726   \n",
       "std       1.112799    30.202904     20.645407   181.066207   456.098091   \n",
       "min       1.000000  1872.000000   1950.000000     0.000000     0.000000   \n",
       "25%       5.000000  1954.000000   1967.000000     0.000000     0.000000   \n",
       "50%       5.000000  1973.000000   1994.000000     0.000000   383.500000   \n",
       "75%       6.000000  2000.000000   2004.000000   166.000000   712.250000   \n",
       "max       9.000000  2010.000000   2010.000000  1600.000000  5644.000000   \n",
       "\n",
       "        BsmtFinSF2    BsmtUnfSF  TotalBsmtSF     1stFlrSF     2ndFlrSF  \\\n",
       "count  1460.000000  1460.000000  1460.000000  1460.000000  1460.000000   \n",
       "mean     46.549315   567.240411  1057.429452  1162.626712   346.992466   \n",
       "std     161.319273   441.866955   438.705324   386.587738   436.528436   \n",
       "min       0.000000     0.000000     0.000000   334.000000     0.000000   \n",
       "25%       0.000000   223.000000   795.750000   882.000000     0.000000   \n",
       "50%       0.000000   477.500000   991.500000  1087.000000     0.000000   \n",
       "75%       0.000000   808.000000  1298.250000  1391.250000   728.000000   \n",
       "max    1474.000000  2336.000000  6110.000000  4692.000000  2065.000000   \n",
       "\n",
       "       LowQualFinSF    GrLivArea  BsmtFullBath  BsmtHalfBath     FullBath  \\\n",
       "count   1460.000000  1460.000000   1460.000000   1460.000000  1460.000000   \n",
       "mean       5.844521  1515.463699      0.425342      0.057534     1.565068   \n",
       "std       48.623081   525.480383      0.518911      0.238753     0.550916   \n",
       "min        0.000000   334.000000      0.000000      0.000000     0.000000   \n",
       "25%        0.000000  1129.500000      0.000000      0.000000     1.000000   \n",
       "50%        0.000000  1464.000000      0.000000      0.000000     2.000000   \n",
       "75%        0.000000  1776.750000      1.000000      0.000000     2.000000   \n",
       "max      572.000000  5642.000000      3.000000      2.000000     3.000000   \n",
       "\n",
       "          HalfBath  BedroomAbvGr  KitchenAbvGr  TotRmsAbvGrd   Fireplaces  \\\n",
       "count  1460.000000   1460.000000   1460.000000   1460.000000  1460.000000   \n",
       "mean      0.382877      2.866438      1.046575      6.517808     0.613014   \n",
       "std       0.502885      0.815778      0.220338      1.625393     0.644666   \n",
       "min       0.000000      0.000000      0.000000      2.000000     0.000000   \n",
       "25%       0.000000      2.000000      1.000000      5.000000     0.000000   \n",
       "50%       0.000000      3.000000      1.000000      6.000000     1.000000   \n",
       "75%       1.000000      3.000000      1.000000      7.000000     1.000000   \n",
       "max       2.000000      8.000000      3.000000     14.000000     3.000000   \n",
       "\n",
       "       GarageYrBlt   GarageCars   GarageArea   WoodDeckSF  OpenPorchSF  \\\n",
       "count  1379.000000  1460.000000  1460.000000  1460.000000  1460.000000   \n",
       "mean   1978.506164     1.767123   472.980137    94.244521    46.660274   \n",
       "std      24.689725     0.747315   213.804841   125.338794    66.256028   \n",
       "min    1900.000000     0.000000     0.000000     0.000000     0.000000   \n",
       "25%    1961.000000     1.000000   334.500000     0.000000     0.000000   \n",
       "50%    1980.000000     2.000000   480.000000     0.000000    25.000000   \n",
       "75%    2002.000000     2.000000   576.000000   168.000000    68.000000   \n",
       "max    2010.000000     4.000000  1418.000000   857.000000   547.000000   \n",
       "\n",
       "       EnclosedPorch    3SsnPorch  ScreenPorch     PoolArea       MiscVal  \\\n",
       "count    1460.000000  1460.000000  1460.000000  1460.000000   1460.000000   \n",
       "mean       21.954110     3.409589    15.060959     2.758904     43.489041   \n",
       "std        61.119149    29.317331    55.757415    40.177307    496.123024   \n",
       "min         0.000000     0.000000     0.000000     0.000000      0.000000   \n",
       "25%         0.000000     0.000000     0.000000     0.000000      0.000000   \n",
       "50%         0.000000     0.000000     0.000000     0.000000      0.000000   \n",
       "75%         0.000000     0.000000     0.000000     0.000000      0.000000   \n",
       "max       552.000000   508.000000   480.000000   738.000000  15500.000000   \n",
       "\n",
       "            MoSold       YrSold      SalePrice  \n",
       "count  1460.000000  1460.000000    1460.000000  \n",
       "mean      6.321918  2007.815753  180921.195890  \n",
       "std       2.703626     1.328095   79442.502883  \n",
       "min       1.000000  2006.000000   34900.000000  \n",
       "25%       5.000000  2007.000000  129975.000000  \n",
       "50%       6.000000  2008.000000  163000.000000  \n",
       "75%       8.000000  2009.000000  214000.000000  \n",
       "max      12.000000  2010.000000  755000.000000  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_raw.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62dc52d4",
   "metadata": {
    "papermill": {
     "duration": 0.012837,
     "end_time": "2024-09-09T20:40:59.333361",
     "exception": false,
     "start_time": "2024-09-09T20:40:59.320524",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Initial Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b376608d",
   "metadata": {
    "papermill": {
     "duration": 0.012751,
     "end_time": "2024-09-09T20:40:59.359071",
     "exception": false,
     "start_time": "2024-09-09T20:40:59.346320",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8ffd9138",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:40:59.387712Z",
     "iopub.status.busy": "2024-09-09T20:40:59.386895Z",
     "iopub.status.idle": "2024-09-09T20:40:59.429297Z",
     "shell.execute_reply": "2024-09-09T20:40:59.428222Z"
    },
    "papermill": {
     "duration": 0.059196,
     "end_time": "2024-09-09T20:40:59.431761",
     "exception": false,
     "start_time": "2024-09-09T20:40:59.372565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Continuous: 37 Categorical: 43\n"
     ]
    }
   ],
   "source": [
    "df = df_raw.copy()\n",
    "df['SalePrice'] = np.log(df['SalePrice'])\n",
    "procs = [Categorify, FillMissing]\n",
    "cont,cat = cont_cat_split(df, 1, dep_var='SalePrice')\n",
    "splits = RandomSplitter(valid_pct=0.2)(range_of(df))\n",
    "print(\"Continuous:\",len(cont), \"Categorical:\",len(cat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9e1ad94e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:40:59.460334Z",
     "iopub.status.busy": "2024-09-09T20:40:59.459588Z",
     "iopub.status.idle": "2024-09-09T20:40:59.673064Z",
     "shell.execute_reply": "2024-09-09T20:40:59.672098Z"
    },
    "papermill": {
     "duration": 0.2301,
     "end_time": "2024-09-09T20:40:59.675282",
     "exception": false,
     "start_time": "2024-09-09T20:40:59.445182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train: 1168 Valid: 292\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>LandSlope</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Condition1</th>\n",
       "      <th>Condition2</th>\n",
       "      <th>BldgType</th>\n",
       "      <th>HouseStyle</th>\n",
       "      <th>RoofStyle</th>\n",
       "      <th>RoofMatl</th>\n",
       "      <th>Exterior1st</th>\n",
       "      <th>Exterior2nd</th>\n",
       "      <th>MasVnrType</th>\n",
       "      <th>ExterQual</th>\n",
       "      <th>ExterCond</th>\n",
       "      <th>Foundation</th>\n",
       "      <th>BsmtQual</th>\n",
       "      <th>BsmtCond</th>\n",
       "      <th>BsmtExposure</th>\n",
       "      <th>BsmtFinType1</th>\n",
       "      <th>BsmtFinType2</th>\n",
       "      <th>Heating</th>\n",
       "      <th>HeatingQC</th>\n",
       "      <th>CentralAir</th>\n",
       "      <th>Electrical</th>\n",
       "      <th>KitchenQual</th>\n",
       "      <th>Functional</th>\n",
       "      <th>FireplaceQu</th>\n",
       "      <th>GarageType</th>\n",
       "      <th>GarageFinish</th>\n",
       "      <th>GarageQual</th>\n",
       "      <th>GarageCond</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>LotFrontage_na</th>\n",
       "      <th>MasVnrArea_na</th>\n",
       "      <th>GarageYrBlt_na</th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>BsmtUnfSF</th>\n",
       "      <th>TotalBsmtSF</th>\n",
       "      <th>1stFlrSF</th>\n",
       "      <th>2ndFlrSF</th>\n",
       "      <th>LowQualFinSF</th>\n",
       "      <th>GrLivArea</th>\n",
       "      <th>BsmtFullBath</th>\n",
       "      <th>BsmtHalfBath</th>\n",
       "      <th>FullBath</th>\n",
       "      <th>HalfBath</th>\n",
       "      <th>BedroomAbvGr</th>\n",
       "      <th>KitchenAbvGr</th>\n",
       "      <th>TotRmsAbvGrd</th>\n",
       "      <th>Fireplaces</th>\n",
       "      <th>GarageYrBlt</th>\n",
       "      <th>GarageCars</th>\n",
       "      <th>GarageArea</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1395</th>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>#na#</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Timber</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>Hip</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>BrkFace</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>PConc</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Unf</td>\n",
       "      <td>Unf</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Typ</td>\n",
       "      <td>Gd</td>\n",
       "      <td>BuiltIn</td>\n",
       "      <td>Fin</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>#na#</td>\n",
       "      <td>#na#</td>\n",
       "      <td>#na#</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1396</td>\n",
       "      <td>60</td>\n",
       "      <td>88.0</td>\n",
       "      <td>12665</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>2005</td>\n",
       "      <td>2006</td>\n",
       "      <td>245.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1094</td>\n",
       "      <td>1094</td>\n",
       "      <td>1133</td>\n",
       "      <td>1349</td>\n",
       "      <td>0</td>\n",
       "      <td>2482</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>3</td>\n",
       "      <td>642</td>\n",
       "      <td>144</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2007</td>\n",
       "      <td>12.546867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1081</th>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>#na#</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Corner</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Sawyer</td>\n",
       "      <td>Feedr</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>1Story</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>HdBoard</td>\n",
       "      <td>HdBoard</td>\n",
       "      <td>#na#</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>CBlock</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>No</td>\n",
       "      <td>ALQ</td>\n",
       "      <td>Unf</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Fa</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>TA</td>\n",
       "      <td>Typ</td>\n",
       "      <td>#na#</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>Fin</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>#na#</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>#na#</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1082</td>\n",
       "      <td>20</td>\n",
       "      <td>75.0</td>\n",
       "      <td>7500</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1963</td>\n",
       "      <td>1963</td>\n",
       "      <td>0.0</td>\n",
       "      <td>824</td>\n",
       "      <td>0</td>\n",
       "      <td>216</td>\n",
       "      <td>1040</td>\n",
       "      <td>1040</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1040</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1963.0</td>\n",
       "      <td>1</td>\n",
       "      <td>308</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>220</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>11.798104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>#na#</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Corner</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>NAmes</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>BrkFace</td>\n",
       "      <td>TA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>CBlock</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>No</td>\n",
       "      <td>Rec</td>\n",
       "      <td>Unf</td>\n",
       "      <td>GasA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Typ</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>Fin</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>#na#</td>\n",
       "      <td>#na#</td>\n",
       "      <td>#na#</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>81</td>\n",
       "      <td>60</td>\n",
       "      <td>100.0</td>\n",
       "      <td>13000</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>1968</td>\n",
       "      <td>1968</td>\n",
       "      <td>576.0</td>\n",
       "      <td>448</td>\n",
       "      <td>0</td>\n",
       "      <td>448</td>\n",
       "      <td>896</td>\n",
       "      <td>1182</td>\n",
       "      <td>960</td>\n",
       "      <td>0</td>\n",
       "      <td>2142</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>1</td>\n",
       "      <td>509</td>\n",
       "      <td>0</td>\n",
       "      <td>72</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>252</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2009</td>\n",
       "      <td>12.173033</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>LandSlope</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Condition1</th>\n",
       "      <th>Condition2</th>\n",
       "      <th>BldgType</th>\n",
       "      <th>HouseStyle</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>RoofStyle</th>\n",
       "      <th>RoofMatl</th>\n",
       "      <th>Exterior1st</th>\n",
       "      <th>Exterior2nd</th>\n",
       "      <th>MasVnrType</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>ExterQual</th>\n",
       "      <th>ExterCond</th>\n",
       "      <th>Foundation</th>\n",
       "      <th>BsmtQual</th>\n",
       "      <th>BsmtCond</th>\n",
       "      <th>BsmtExposure</th>\n",
       "      <th>BsmtFinType1</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinType2</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>BsmtUnfSF</th>\n",
       "      <th>TotalBsmtSF</th>\n",
       "      <th>Heating</th>\n",
       "      <th>HeatingQC</th>\n",
       "      <th>CentralAir</th>\n",
       "      <th>Electrical</th>\n",
       "      <th>1stFlrSF</th>\n",
       "      <th>2ndFlrSF</th>\n",
       "      <th>LowQualFinSF</th>\n",
       "      <th>GrLivArea</th>\n",
       "      <th>BsmtFullBath</th>\n",
       "      <th>BsmtHalfBath</th>\n",
       "      <th>FullBath</th>\n",
       "      <th>HalfBath</th>\n",
       "      <th>BedroomAbvGr</th>\n",
       "      <th>KitchenAbvGr</th>\n",
       "      <th>KitchenQual</th>\n",
       "      <th>TotRmsAbvGrd</th>\n",
       "      <th>Functional</th>\n",
       "      <th>Fireplaces</th>\n",
       "      <th>FireplaceQu</th>\n",
       "      <th>GarageType</th>\n",
       "      <th>GarageYrBlt</th>\n",
       "      <th>GarageFinish</th>\n",
       "      <th>GarageCars</th>\n",
       "      <th>GarageArea</th>\n",
       "      <th>GarageQual</th>\n",
       "      <th>GarageCond</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "      <th>LotFrontage_na</th>\n",
       "      <th>MasVnrArea_na</th>\n",
       "      <th>GarageYrBlt_na</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1395</th>\n",
       "      <td>1396</td>\n",
       "      <td>60</td>\n",
       "      <td>4</td>\n",
       "      <td>88.0</td>\n",
       "      <td>12665</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>2005</td>\n",
       "      <td>2006</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>245.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1094</td>\n",
       "      <td>1094</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1133</td>\n",
       "      <td>1349</td>\n",
       "      <td>0</td>\n",
       "      <td>2482</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>642</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>144</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2007</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>12.546867</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1081</th>\n",
       "      <td>1082</td>\n",
       "      <td>20</td>\n",
       "      <td>4</td>\n",
       "      <td>75.0</td>\n",
       "      <td>7500</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1963</td>\n",
       "      <td>1963</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>824</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>216</td>\n",
       "      <td>1040</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1040</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1040</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1963.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>308</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>220</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>11.798104</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>81</td>\n",
       "      <td>60</td>\n",
       "      <td>4</td>\n",
       "      <td>100.0</td>\n",
       "      <td>13000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>1968</td>\n",
       "      <td>1968</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>576.0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>448</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>448</td>\n",
       "      <td>896</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1182</td>\n",
       "      <td>960</td>\n",
       "      <td>0</td>\n",
       "      <td>2142</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>509</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>72</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>252</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2009</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>12.173033</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id  MSSubClass  MSZoning  LotFrontage  LotArea  Street  Alley  \\\n",
       "1395  1396          60         4         88.0    12665       2      0   \n",
       "1081  1082          20         4         75.0     7500       2      0   \n",
       "80      81          60         4        100.0    13000       2      0   \n",
       "\n",
       "      LotShape  LandContour  Utilities  LotConfig  LandSlope  Neighborhood  \\\n",
       "1395         1            4          1          5          1            24   \n",
       "1081         4            4          1          1          1            20   \n",
       "80           4            4          1          1          1            13   \n",
       "\n",
       "      Condition1  Condition2  BldgType  HouseStyle  OverallQual  OverallCond  \\\n",
       "1395           3           3         1           6            8            5   \n",
       "1081           2           3         1           3            5            5   \n",
       "80             3           3         1           6            6            6   \n",
       "\n",
       "      YearBuilt  YearRemodAdd  RoofStyle  RoofMatl  Exterior1st  Exterior2nd  \\\n",
       "1395       2005          2006          4         2           13           14   \n",
       "1081       1963          1963          2         2            7            7   \n",
       "80         1968          1968          2         2           13           14   \n",
       "\n",
       "      MasVnrType  MasVnrArea  ExterQual  ExterCond  Foundation  BsmtQual  \\\n",
       "1395           2       245.0          3          5           3         3   \n",
       "1081           0         0.0          4          5           2         4   \n",
       "80             2       576.0          4          3           2         3   \n",
       "\n",
       "      BsmtCond  BsmtExposure  BsmtFinType1  BsmtFinSF1  BsmtFinType2  \\\n",
       "1395         2             2             6           0             6   \n",
       "1081         4             4             1         824             6   \n",
       "80           4             4             5         448             6   \n",
       "\n",
       "      BsmtFinSF2  BsmtUnfSF  TotalBsmtSF  Heating  HeatingQC  CentralAir  \\\n",
       "1395           0       1094         1094        2          1           2   \n",
       "1081           0        216         1040        2          2           2   \n",
       "80             0        448          896        2          5           2   \n",
       "\n",
       "      Electrical  1stFlrSF  2ndFlrSF  LowQualFinSF  GrLivArea  BsmtFullBath  \\\n",
       "1395           5      1133      1349             0       2482             0   \n",
       "1081           5      1040         0             0       1040             1   \n",
       "80             5      1182       960             0       2142             0   \n",
       "\n",
       "      BsmtHalfBath  FullBath  HalfBath  BedroomAbvGr  KitchenAbvGr  \\\n",
       "1395             0         2         1             4             1   \n",
       "1081             0         1         1             3             1   \n",
       "80               0         2         1             4             1   \n",
       "\n",
       "      KitchenQual  TotRmsAbvGrd  Functional  Fireplaces  FireplaceQu  \\\n",
       "1395            3             9           7           1            3   \n",
       "1081            4             5           7           0            0   \n",
       "80              3             8           7           1            3   \n",
       "\n",
       "      GarageType  GarageYrBlt  GarageFinish  GarageCars  GarageArea  \\\n",
       "1395           4       2005.0             1           3         642   \n",
       "1081           2       1963.0             1           1         308   \n",
       "80             2       1968.0             1           1         509   \n",
       "\n",
       "      GarageQual  GarageCond  PavedDrive  WoodDeckSF  OpenPorchSF  \\\n",
       "1395           5           5           3         144           39   \n",
       "1081           5           5           3           0            0   \n",
       "80             5           5           3           0           72   \n",
       "\n",
       "      EnclosedPorch  3SsnPorch  ScreenPorch  PoolArea  PoolQC  Fence  \\\n",
       "1395              0          0            0         0       0      0   \n",
       "1081            220          0            0         0       0      3   \n",
       "80                0          0          252         0       0      0   \n",
       "\n",
       "      MiscFeature  MiscVal  MoSold  YrSold  SaleType  SaleCondition  \\\n",
       "1395            0        0       2    2007         9              5   \n",
       "1081            0        0       6    2010         9              5   \n",
       "80              0        0       6    2009         9              5   \n",
       "\n",
       "      SalePrice  LotFrontage_na  MasVnrArea_na  GarageYrBlt_na  \n",
       "1395  12.546867               1              1               1  \n",
       "1081  11.798104               1              1               1  \n",
       "80    12.173033               1              1               1  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dls = TabularDataLoaders.from_df(df, procs=procs, cat_names=cat, cont_names=cont, y_names='SalePrice', splits=splits, bs=64)\n",
    "print(\"Train:\", len(dls.train.items), \"Valid:\", len(dls.valid.items))\n",
    "dls.show(3)\n",
    "dls.items.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ee72da9",
   "metadata": {
    "papermill": {
     "duration": 0.013995,
     "end_time": "2024-09-09T20:40:59.703953",
     "exception": false,
     "start_time": "2024-09-09T20:40:59.689958",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Raw Model Creation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "987932ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:40:59.734368Z",
     "iopub.status.busy": "2024-09-09T20:40:59.733580Z",
     "iopub.status.idle": "2024-09-09T20:40:59.740304Z",
     "shell.execute_reply": "2024-09-09T20:40:59.738886Z"
    },
    "papermill": {
     "duration": 0.024376,
     "end_time": "2024-09-09T20:40:59.742618",
     "exception": false,
     "start_time": "2024-09-09T20:40:59.718242",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def rf(xs, y, n_estimators=250, max_features=0.5, min_samples_leaf=5, **kwargs):\n",
    "    return RandomForestRegressor(n_jobs=-1, n_estimators=n_estimators, max_features=max_features,\n",
    "                                min_samples_leaf=min_samples_leaf, oob_score=True).fit(xs, y)\n",
    "def r_mse(pred,y): \n",
    "    return round(math.sqrt(((pred-y)**2).mean()), 6)\n",
    "\n",
    "def m_rmse(m, xs, y): \n",
    "    return r_mse(m.predict(xs), y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5eaac5c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:40:59.776064Z",
     "iopub.status.busy": "2024-09-09T20:40:59.775680Z",
     "iopub.status.idle": "2024-09-09T20:41:00.977077Z",
     "shell.execute_reply": "2024-09-09T20:41:00.976115Z"
    },
    "papermill": {
     "duration": 1.218933,
     "end_time": "2024-09-09T20:41:00.979368",
     "exception": false,
     "start_time": "2024-09-09T20:40:59.760435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.092999, 0.142636)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xs, y, valid_xs, valid_y = dls.train.xs, dls.train.y, dls.valid.xs, dls.valid.y\n",
    "m = rf(xs, y)\n",
    "m_rmse(m, xs, y), m_rmse(m, valid_xs, valid_y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b83c36ed",
   "metadata": {
    "papermill": {
     "duration": 0.013919,
     "end_time": "2024-09-09T20:41:01.007593",
     "exception": false,
     "start_time": "2024-09-09T20:41:00.993674",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ad98965",
   "metadata": {
    "papermill": {
     "duration": 0.013779,
     "end_time": "2024-09-09T20:41:01.035445",
     "exception": false,
     "start_time": "2024-09-09T20:41:01.021666",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f57f1340",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:01.064993Z",
     "iopub.status.busy": "2024-09-09T20:41:01.064586Z",
     "iopub.status.idle": "2024-09-09T20:41:01.189852Z",
     "shell.execute_reply": "2024-09-09T20:41:01.188902Z"
    },
    "papermill": {
     "duration": 0.143008,
     "end_time": "2024-09-09T20:41:01.192363",
     "exception": false,
     "start_time": "2024-09-09T20:41:01.049355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>BsmtUnfSF</th>\n",
       "      <th>TotalBsmtSF</th>\n",
       "      <th>1stFlrSF</th>\n",
       "      <th>2ndFlrSF</th>\n",
       "      <th>LowQualFinSF</th>\n",
       "      <th>GrLivArea</th>\n",
       "      <th>BsmtFullBath</th>\n",
       "      <th>BsmtHalfBath</th>\n",
       "      <th>FullBath</th>\n",
       "      <th>HalfBath</th>\n",
       "      <th>BedroomAbvGr</th>\n",
       "      <th>KitchenAbvGr</th>\n",
       "      <th>TotRmsAbvGrd</th>\n",
       "      <th>Fireplaces</th>\n",
       "      <th>GarageYrBlt</th>\n",
       "      <th>GarageCars</th>\n",
       "      <th>GarageArea</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.00000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "      <td>1459.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2190.000000</td>\n",
       "      <td>57.378341</td>\n",
       "      <td>57.910212</td>\n",
       "      <td>9819.161069</td>\n",
       "      <td>6.078821</td>\n",
       "      <td>5.553804</td>\n",
       "      <td>1971.357779</td>\n",
       "      <td>1983.662783</td>\n",
       "      <td>99.673749</td>\n",
       "      <td>438.902673</td>\n",
       "      <td>52.583276</td>\n",
       "      <td>553.915010</td>\n",
       "      <td>1045.400960</td>\n",
       "      <td>1156.534613</td>\n",
       "      <td>325.967786</td>\n",
       "      <td>3.543523</td>\n",
       "      <td>1486.045922</td>\n",
       "      <td>0.433859</td>\n",
       "      <td>0.065113</td>\n",
       "      <td>1.570939</td>\n",
       "      <td>0.377656</td>\n",
       "      <td>2.854010</td>\n",
       "      <td>1.042495</td>\n",
       "      <td>6.385195</td>\n",
       "      <td>0.58122</td>\n",
       "      <td>1871.989719</td>\n",
       "      <td>1.764907</td>\n",
       "      <td>472.444825</td>\n",
       "      <td>93.174777</td>\n",
       "      <td>48.313914</td>\n",
       "      <td>24.243317</td>\n",
       "      <td>1.794380</td>\n",
       "      <td>17.064428</td>\n",
       "      <td>1.744345</td>\n",
       "      <td>58.167923</td>\n",
       "      <td>6.104181</td>\n",
       "      <td>2007.769705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>421.321334</td>\n",
       "      <td>42.746880</td>\n",
       "      <td>32.266054</td>\n",
       "      <td>4955.517327</td>\n",
       "      <td>1.436812</td>\n",
       "      <td>1.113740</td>\n",
       "      <td>30.390071</td>\n",
       "      <td>21.130467</td>\n",
       "      <td>177.001792</td>\n",
       "      <td>455.257119</td>\n",
       "      <td>176.698671</td>\n",
       "      <td>437.351324</td>\n",
       "      <td>443.592976</td>\n",
       "      <td>398.165820</td>\n",
       "      <td>420.610226</td>\n",
       "      <td>44.043251</td>\n",
       "      <td>485.566099</td>\n",
       "      <td>0.530527</td>\n",
       "      <td>0.252307</td>\n",
       "      <td>0.555190</td>\n",
       "      <td>0.503017</td>\n",
       "      <td>0.829788</td>\n",
       "      <td>0.208472</td>\n",
       "      <td>1.508895</td>\n",
       "      <td>0.64742</td>\n",
       "      <td>445.786118</td>\n",
       "      <td>0.777056</td>\n",
       "      <td>217.326902</td>\n",
       "      <td>127.744882</td>\n",
       "      <td>68.883364</td>\n",
       "      <td>67.227765</td>\n",
       "      <td>20.207842</td>\n",
       "      <td>56.609763</td>\n",
       "      <td>30.491646</td>\n",
       "      <td>630.806978</td>\n",
       "      <td>2.722432</td>\n",
       "      <td>1.301740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1461.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1470.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1879.000000</td>\n",
       "      <td>1950.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>407.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>407.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2006.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1825.500000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>7391.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1953.000000</td>\n",
       "      <td>1963.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>219.000000</td>\n",
       "      <td>784.000000</td>\n",
       "      <td>873.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1117.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1956.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>317.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2007.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2190.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>9399.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1973.000000</td>\n",
       "      <td>1992.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>350.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>460.000000</td>\n",
       "      <td>988.000000</td>\n",
       "      <td>1079.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1432.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1977.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>480.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2554.500000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>78.000000</td>\n",
       "      <td>11517.500000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2001.000000</td>\n",
       "      <td>2004.000000</td>\n",
       "      <td>162.000000</td>\n",
       "      <td>752.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>797.500000</td>\n",
       "      <td>1304.000000</td>\n",
       "      <td>1382.500000</td>\n",
       "      <td>676.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1721.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>2001.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>576.000000</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2009.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2919.000000</td>\n",
       "      <td>190.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>56600.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>1290.000000</td>\n",
       "      <td>4010.000000</td>\n",
       "      <td>1526.000000</td>\n",
       "      <td>2140.000000</td>\n",
       "      <td>5095.000000</td>\n",
       "      <td>5095.000000</td>\n",
       "      <td>1862.000000</td>\n",
       "      <td>1064.000000</td>\n",
       "      <td>5095.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>4.00000</td>\n",
       "      <td>2207.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1488.000000</td>\n",
       "      <td>1424.000000</td>\n",
       "      <td>742.000000</td>\n",
       "      <td>1012.000000</td>\n",
       "      <td>360.000000</td>\n",
       "      <td>576.000000</td>\n",
       "      <td>800.000000</td>\n",
       "      <td>17000.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Id   MSSubClass  LotFrontage       LotArea  OverallQual  \\\n",
       "count  1459.000000  1459.000000  1459.000000   1459.000000  1459.000000   \n",
       "mean   2190.000000    57.378341    57.910212   9819.161069     6.078821   \n",
       "std     421.321334    42.746880    32.266054   4955.517327     1.436812   \n",
       "min    1461.000000    20.000000     0.000000   1470.000000     1.000000   \n",
       "25%    1825.500000    20.000000    44.000000   7391.000000     5.000000   \n",
       "50%    2190.000000    50.000000    63.000000   9399.000000     6.000000   \n",
       "75%    2554.500000    70.000000    78.000000  11517.500000     7.000000   \n",
       "max    2919.000000   190.000000   200.000000  56600.000000    10.000000   \n",
       "\n",
       "       OverallCond    YearBuilt  YearRemodAdd   MasVnrArea   BsmtFinSF1  \\\n",
       "count  1459.000000  1459.000000   1459.000000  1459.000000  1459.000000   \n",
       "mean      5.553804  1971.357779   1983.662783    99.673749   438.902673   \n",
       "std       1.113740    30.390071     21.130467   177.001792   455.257119   \n",
       "min       1.000000  1879.000000   1950.000000     0.000000     0.000000   \n",
       "25%       5.000000  1953.000000   1963.000000     0.000000     0.000000   \n",
       "50%       5.000000  1973.000000   1992.000000     0.000000   350.000000   \n",
       "75%       6.000000  2001.000000   2004.000000   162.000000   752.000000   \n",
       "max       9.000000  2010.000000   2010.000000  1290.000000  4010.000000   \n",
       "\n",
       "        BsmtFinSF2    BsmtUnfSF  TotalBsmtSF     1stFlrSF     2ndFlrSF  \\\n",
       "count  1459.000000  1459.000000  1459.000000  1459.000000  1459.000000   \n",
       "mean     52.583276   553.915010  1045.400960  1156.534613   325.967786   \n",
       "std     176.698671   437.351324   443.592976   398.165820   420.610226   \n",
       "min       0.000000     0.000000     0.000000   407.000000     0.000000   \n",
       "25%       0.000000   219.000000   784.000000   873.500000     0.000000   \n",
       "50%       0.000000   460.000000   988.000000  1079.000000     0.000000   \n",
       "75%       0.000000   797.500000  1304.000000  1382.500000   676.000000   \n",
       "max    1526.000000  2140.000000  5095.000000  5095.000000  1862.000000   \n",
       "\n",
       "       LowQualFinSF    GrLivArea  BsmtFullBath  BsmtHalfBath     FullBath  \\\n",
       "count   1459.000000  1459.000000   1459.000000   1459.000000  1459.000000   \n",
       "mean       3.543523  1486.045922      0.433859      0.065113     1.570939   \n",
       "std       44.043251   485.566099      0.530527      0.252307     0.555190   \n",
       "min        0.000000   407.000000      0.000000      0.000000     0.000000   \n",
       "25%        0.000000  1117.500000      0.000000      0.000000     1.000000   \n",
       "50%        0.000000  1432.000000      0.000000      0.000000     2.000000   \n",
       "75%        0.000000  1721.000000      1.000000      0.000000     2.000000   \n",
       "max     1064.000000  5095.000000      3.000000      2.000000     4.000000   \n",
       "\n",
       "          HalfBath  BedroomAbvGr  KitchenAbvGr  TotRmsAbvGrd  Fireplaces  \\\n",
       "count  1459.000000   1459.000000   1459.000000   1459.000000  1459.00000   \n",
       "mean      0.377656      2.854010      1.042495      6.385195     0.58122   \n",
       "std       0.503017      0.829788      0.208472      1.508895     0.64742   \n",
       "min       0.000000      0.000000      0.000000      3.000000     0.00000   \n",
       "25%       0.000000      2.000000      1.000000      5.000000     0.00000   \n",
       "50%       0.000000      3.000000      1.000000      6.000000     0.00000   \n",
       "75%       1.000000      3.000000      1.000000      7.000000     1.00000   \n",
       "max       2.000000      6.000000      2.000000     15.000000     4.00000   \n",
       "\n",
       "       GarageYrBlt   GarageCars   GarageArea   WoodDeckSF  OpenPorchSF  \\\n",
       "count  1459.000000  1459.000000  1459.000000  1459.000000  1459.000000   \n",
       "mean   1871.989719     1.764907   472.444825    93.174777    48.313914   \n",
       "std     445.786118     0.777056   217.326902   127.744882    68.883364   \n",
       "min       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
       "25%    1956.000000     1.000000   317.500000     0.000000     0.000000   \n",
       "50%    1977.000000     2.000000   480.000000     0.000000    28.000000   \n",
       "75%    2001.000000     2.000000   576.000000   168.000000    72.000000   \n",
       "max    2207.000000     5.000000  1488.000000  1424.000000   742.000000   \n",
       "\n",
       "       EnclosedPorch    3SsnPorch  ScreenPorch     PoolArea       MiscVal  \\\n",
       "count    1459.000000  1459.000000  1459.000000  1459.000000   1459.000000   \n",
       "mean       24.243317     1.794380    17.064428     1.744345     58.167923   \n",
       "std        67.227765    20.207842    56.609763    30.491646    630.806978   \n",
       "min         0.000000     0.000000     0.000000     0.000000      0.000000   \n",
       "25%         0.000000     0.000000     0.000000     0.000000      0.000000   \n",
       "50%         0.000000     0.000000     0.000000     0.000000      0.000000   \n",
       "75%         0.000000     0.000000     0.000000     0.000000      0.000000   \n",
       "max      1012.000000   360.000000   576.000000   800.000000  17000.000000   \n",
       "\n",
       "            MoSold       YrSold  \n",
       "count  1459.000000  1459.000000  \n",
       "mean      6.104181  2007.769705  \n",
       "std       2.722432     1.301740  \n",
       "min       1.000000  2006.000000  \n",
       "25%       4.000000  2007.000000  \n",
       "50%       6.000000  2008.000000  \n",
       "75%       8.000000  2009.000000  \n",
       "max      12.000000  2010.000000  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test = pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/test.csv\").fillna(0)\n",
    "df_test.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "93f295b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:01.223300Z",
     "iopub.status.busy": "2024-09-09T20:41:01.222900Z",
     "iopub.status.idle": "2024-09-09T20:41:06.570902Z",
     "shell.execute_reply": "2024-09-09T20:41:06.570004Z"
    },
    "papermill": {
     "duration": 5.366261,
     "end_time": "2024-09-09T20:41:06.573413",
     "exception": false,
     "start_time": "2024-09-09T20:41:01.207152",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dls_test = dls.test_dl(df_test)\n",
    "xs_test = dls_test.xs\n",
    "predictions,bias,contributions = treeinterpreter.predict(m, xs_test)\n",
    "final_preds = np.exp(predictions)\n",
    "test_ids = np.array(df_test['Id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "acae164d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:06.605377Z",
     "iopub.status.busy": "2024-09-09T20:41:06.604691Z",
     "iopub.status.idle": "2024-09-09T20:41:06.615515Z",
     "shell.execute_reply": "2024-09-09T20:41:06.614721Z"
    },
    "papermill": {
     "duration": 0.028908,
     "end_time": "2024-09-09T20:41:06.617509",
     "exception": false,
     "start_time": "2024-09-09T20:41:06.588601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission_df = pd.DataFrame({\n",
    "    'Id': test_ids,\n",
    "    'SalePrice': final_preds[:, 0]\n",
    "})\n",
    "\n",
    "submission_df.to_csv('/kaggle/working/submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32bff468",
   "metadata": {
    "papermill": {
     "duration": 0.014638,
     "end_time": "2024-09-09T20:41:06.647015",
     "exception": false,
     "start_time": "2024-09-09T20:41:06.632377",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Function to Submit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00ea9672",
   "metadata": {
    "papermill": {
     "duration": 0.014508,
     "end_time": "2024-09-09T20:41:06.676238",
     "exception": false,
     "start_time": "2024-09-09T20:41:06.661730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "037a81f9",
   "metadata": {
    "papermill": {
     "duration": 0.014759,
     "end_time": "2024-09-09T20:41:06.705711",
     "exception": false,
     "start_time": "2024-09-09T20:41:06.690952",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Feature Evaluation & Cleansing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "27f43153",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:06.737496Z",
     "iopub.status.busy": "2024-09-09T20:41:06.736709Z",
     "iopub.status.idle": "2024-09-09T20:41:06.740972Z",
     "shell.execute_reply": "2024-09-09T20:41:06.740020Z"
    },
    "papermill": {
     "duration": 0.022353,
     "end_time": "2024-09-09T20:41:06.743024",
     "exception": false,
     "start_time": "2024-09-09T20:41:06.720671",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# m.feature_importances_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "94128eb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:06.774280Z",
     "iopub.status.busy": "2024-09-09T20:41:06.773892Z",
     "iopub.status.idle": "2024-09-09T20:41:06.778060Z",
     "shell.execute_reply": "2024-09-09T20:41:06.777108Z"
    },
    "papermill": {
     "duration": 0.02208,
     "end_time": "2024-09-09T20:41:06.780044",
     "exception": false,
     "start_time": "2024-09-09T20:41:06.757964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def rf_feat_importance(m, df):\n",
    "#     return pd.DataFrame({'cols':df.columns, 'imp':m.feature_importances_}\n",
    "#                        ).sort_values('imp', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "226b5767",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:06.811566Z",
     "iopub.status.busy": "2024-09-09T20:41:06.810903Z",
     "iopub.status.idle": "2024-09-09T20:41:06.815079Z",
     "shell.execute_reply": "2024-09-09T20:41:06.814100Z"
    },
    "papermill": {
     "duration": 0.022185,
     "end_time": "2024-09-09T20:41:06.817118",
     "exception": false,
     "start_time": "2024-09-09T20:41:06.794933",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# fi = rf_feat_importance(m, xs)\n",
    "# fi[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "91865fb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:06.849078Z",
     "iopub.status.busy": "2024-09-09T20:41:06.848217Z",
     "iopub.status.idle": "2024-09-09T20:41:06.852491Z",
     "shell.execute_reply": "2024-09-09T20:41:06.851480Z"
    },
    "papermill": {
     "duration": 0.022068,
     "end_time": "2024-09-09T20:41:06.854408",
     "exception": false,
     "start_time": "2024-09-09T20:41:06.832340",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def plot_fi(fi):\n",
    "#     return fi.plot('cols', 'imp', 'barh', figsize=(12,7), legend=False)\n",
    "\n",
    "# plot_fi(fi[:30]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "04e46e7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:06.886650Z",
     "iopub.status.busy": "2024-09-09T20:41:06.886268Z",
     "iopub.status.idle": "2024-09-09T20:41:06.890363Z",
     "shell.execute_reply": "2024-09-09T20:41:06.889409Z"
    },
    "papermill": {
     "duration": 0.023054,
     "end_time": "2024-09-09T20:41:06.892299",
     "exception": false,
     "start_time": "2024-09-09T20:41:06.869245",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# to_keep = fi[fi.imp>0.005].cols\n",
    "# len(to_keep)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "41cefa84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:06.922803Z",
     "iopub.status.busy": "2024-09-09T20:41:06.922464Z",
     "iopub.status.idle": "2024-09-09T20:41:06.926380Z",
     "shell.execute_reply": "2024-09-09T20:41:06.925542Z"
    },
    "papermill": {
     "duration": 0.021401,
     "end_time": "2024-09-09T20:41:06.928399",
     "exception": false,
     "start_time": "2024-09-09T20:41:06.906998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# xs_imp = xs[to_keep]\n",
    "# valid_xs_imp = valid_xs[to_keep]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "90af4bdd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:06.959259Z",
     "iopub.status.busy": "2024-09-09T20:41:06.958646Z",
     "iopub.status.idle": "2024-09-09T20:41:06.962922Z",
     "shell.execute_reply": "2024-09-09T20:41:06.961978Z"
    },
    "papermill": {
     "duration": 0.021922,
     "end_time": "2024-09-09T20:41:06.964906",
     "exception": false,
     "start_time": "2024-09-09T20:41:06.942984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# m_imp = rf(xs_imp, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3395925b",
   "metadata": {
    "papermill": {
     "duration": 0.014384,
     "end_time": "2024-09-09T20:41:06.993915",
     "exception": false,
     "start_time": "2024-09-09T20:41:06.979531",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7ab72210",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.025493Z",
     "iopub.status.busy": "2024-09-09T20:41:07.024749Z",
     "iopub.status.idle": "2024-09-09T20:41:07.028993Z",
     "shell.execute_reply": "2024-09-09T20:41:07.028039Z"
    },
    "papermill": {
     "duration": 0.022287,
     "end_time": "2024-09-09T20:41:07.031067",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.008780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# m_rmse(m_imp, xs_imp, y), m_rmse(m_imp, valid_xs_imp, valid_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fb5163b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.062343Z",
     "iopub.status.busy": "2024-09-09T20:41:07.061513Z",
     "iopub.status.idle": "2024-09-09T20:41:07.065868Z",
     "shell.execute_reply": "2024-09-09T20:41:07.064941Z"
    },
    "papermill": {
     "duration": 0.022202,
     "end_time": "2024-09-09T20:41:07.067941",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.045739",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# plot_fi(rf_feat_importance(m_imp, xs_imp));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2235a76e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.098636Z",
     "iopub.status.busy": "2024-09-09T20:41:07.098293Z",
     "iopub.status.idle": "2024-09-09T20:41:07.103101Z",
     "shell.execute_reply": "2024-09-09T20:41:07.102202Z"
    },
    "papermill": {
     "duration": 0.022549,
     "end_time": "2024-09-09T20:41:07.105117",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.082568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import seaborn as sns\n",
    "# import matplotlib.pyplot as plt\n",
    "# from scipy.cluster.hierarchy import linkage, leaves_list\n",
    "\n",
    "# def cluster_and_visualize_columns(df):\n",
    "#     # Step 1: Compute correlation matrix of the columns\n",
    "#     corr = df.corr()\n",
    "\n",
    "#     # Step 2: Perform hierarchical clustering on the correlation matrix\n",
    "#     Z = linkage(corr, method='ward')\n",
    "\n",
    "#     # Step 3: Get the column order based on the clustering\n",
    "#     col_order = leaves_list(Z)\n",
    "\n",
    "#     # Step 4: Reorder the correlation matrix\n",
    "#     clustered_corr = corr.iloc[col_order, col_order]\n",
    "\n",
    "#     # Step 5: Plot the clustered correlation matrix with better spacing\n",
    "#     plt.figure(figsize=(10, 8))  # Adjust figure size here\n",
    "#     sns.heatmap(clustered_corr, annot=True, cmap='coolwarm', fmt='.2f', annot_kws={\"size\": 10},  # Adjust font size\n",
    "#                 cbar_kws={'shrink': 0.75})  # Adjust color bar size\n",
    "#     plt.xticks(rotation=45, ha='right', fontsize=10)  # Rotate x-axis labels\n",
    "#     plt.yticks(fontsize=10)  # Adjust y-axis labels font size\n",
    "#     plt.title(\"Clustered Correlation Matrix\", fontsize=15)\n",
    "#     plt.tight_layout()  # Ensure everything fits without overlap\n",
    "#     plt.show()\n",
    "\n",
    "# cluster_and_visualize_columns(xs_imp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "feefac44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.135951Z",
     "iopub.status.busy": "2024-09-09T20:41:07.135602Z",
     "iopub.status.idle": "2024-09-09T20:41:07.139766Z",
     "shell.execute_reply": "2024-09-09T20:41:07.138843Z"
    },
    "papermill": {
     "duration": 0.021934,
     "end_time": "2024-09-09T20:41:07.141668",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.119734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import warnings\n",
    "# warnings.simplefilter('ignore', FutureWarning)\n",
    "\n",
    "# from treeinterpreter import treeinterpreter\n",
    "# from waterfall_chart import plot as waterfall"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0ba653b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.216645Z",
     "iopub.status.busy": "2024-09-09T20:41:07.216241Z",
     "iopub.status.idle": "2024-09-09T20:41:07.220586Z",
     "shell.execute_reply": "2024-09-09T20:41:07.219678Z"
    },
    "papermill": {
     "duration": 0.02222,
     "end_time": "2024-09-09T20:41:07.222549",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.200329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# row = valid_xs_imp.iloc[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "fdb0a32f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.253670Z",
     "iopub.status.busy": "2024-09-09T20:41:07.252878Z",
     "iopub.status.idle": "2024-09-09T20:41:07.257219Z",
     "shell.execute_reply": "2024-09-09T20:41:07.256321Z"
    },
    "papermill": {
     "duration": 0.02193,
     "end_time": "2024-09-09T20:41:07.259128",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.237198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# prediction,bias,contributions = treeinterpreter.predict(m_imp, row.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "541e2651",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.289662Z",
     "iopub.status.busy": "2024-09-09T20:41:07.289309Z",
     "iopub.status.idle": "2024-09-09T20:41:07.293375Z",
     "shell.execute_reply": "2024-09-09T20:41:07.292419Z"
    },
    "papermill": {
     "duration": 0.021636,
     "end_time": "2024-09-09T20:41:07.295299",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.273663",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# prediction[0], bias[0], contributions[0].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6d3564c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.326267Z",
     "iopub.status.busy": "2024-09-09T20:41:07.325652Z",
     "iopub.status.idle": "2024-09-09T20:41:07.329850Z",
     "shell.execute_reply": "2024-09-09T20:41:07.328963Z"
    },
    "papermill": {
     "duration": 0.021756,
     "end_time": "2024-09-09T20:41:07.331834",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.310078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# waterfall(valid_xs_imp.columns, contributions[0], threshold=0.08, \n",
    "#           rotation_value=45,formatting='{:,.3f}');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d940d11",
   "metadata": {
    "papermill": {
     "duration": 0.014323,
     "end_time": "2024-09-09T20:41:07.360807",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.346484",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## First Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "2ff1d763",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.392199Z",
     "iopub.status.busy": "2024-09-09T20:41:07.391220Z",
     "iopub.status.idle": "2024-09-09T20:41:07.395641Z",
     "shell.execute_reply": "2024-09-09T20:41:07.394696Z"
    },
    "papermill": {
     "duration": 0.022216,
     "end_time": "2024-09-09T20:41:07.397694",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.375478",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sample = pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv\")\n",
    "# sample.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "525c04e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.429242Z",
     "iopub.status.busy": "2024-09-09T20:41:07.428471Z",
     "iopub.status.idle": "2024-09-09T20:41:07.432880Z",
     "shell.execute_reply": "2024-09-09T20:41:07.431914Z"
    },
    "papermill": {
     "duration": 0.022372,
     "end_time": "2024-09-09T20:41:07.434881",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.412509",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# test = pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a1d6ea55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.466782Z",
     "iopub.status.busy": "2024-09-09T20:41:07.465867Z",
     "iopub.status.idle": "2024-09-09T20:41:07.470275Z",
     "shell.execute_reply": "2024-09-09T20:41:07.469322Z"
    },
    "papermill": {
     "duration": 0.022455,
     "end_time": "2024-09-09T20:41:07.472325",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.449870",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# test.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "0cbce179",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.503622Z",
     "iopub.status.busy": "2024-09-09T20:41:07.502887Z",
     "iopub.status.idle": "2024-09-09T20:41:07.507130Z",
     "shell.execute_reply": "2024-09-09T20:41:07.506216Z"
    },
    "papermill": {
     "duration": 0.021877,
     "end_time": "2024-09-09T20:41:07.509071",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.487194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# tdf_test = TabularPandas(test, procs, cat, cont)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bee4f459",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.542224Z",
     "iopub.status.busy": "2024-09-09T20:41:07.541473Z",
     "iopub.status.idle": "2024-09-09T20:41:07.545748Z",
     "shell.execute_reply": "2024-09-09T20:41:07.544822Z"
    },
    "papermill": {
     "duration": 0.022585,
     "end_time": "2024-09-09T20:41:07.547830",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.525245",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# xs_test = tdf_test.xs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "bf311ef9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.578937Z",
     "iopub.status.busy": "2024-09-09T20:41:07.578244Z",
     "iopub.status.idle": "2024-09-09T20:41:07.582428Z",
     "shell.execute_reply": "2024-09-09T20:41:07.581492Z"
    },
    "papermill": {
     "duration": 0.021754,
     "end_time": "2024-09-09T20:41:07.584390",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.562636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# xs_test = xs_test[to_keep]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "cca8258a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.614900Z",
     "iopub.status.busy": "2024-09-09T20:41:07.614564Z",
     "iopub.status.idle": "2024-09-09T20:41:07.618664Z",
     "shell.execute_reply": "2024-09-09T20:41:07.617838Z"
    },
    "papermill": {
     "duration": 0.021657,
     "end_time": "2024-09-09T20:41:07.620609",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.598952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# predictions, bias, contributions = treeinterpreter.predict(m_imp, xs_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "3a6c92cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.652104Z",
     "iopub.status.busy": "2024-09-09T20:41:07.651750Z",
     "iopub.status.idle": "2024-09-09T20:41:07.655850Z",
     "shell.execute_reply": "2024-09-09T20:41:07.654924Z"
    },
    "papermill": {
     "duration": 0.022278,
     "end_time": "2024-09-09T20:41:07.657879",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.635601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# len(predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "108b72b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.689331Z",
     "iopub.status.busy": "2024-09-09T20:41:07.688743Z",
     "iopub.status.idle": "2024-09-09T20:41:07.693263Z",
     "shell.execute_reply": "2024-09-09T20:41:07.692319Z"
    },
    "papermill": {
     "duration": 0.022568,
     "end_time": "2024-09-09T20:41:07.695210",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.672642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# final_preds = np.exp(predictions)\n",
    "# final_preds.squeeze()\n",
    "# final_preds.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "91951e25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.726702Z",
     "iopub.status.busy": "2024-09-09T20:41:07.725858Z",
     "iopub.status.idle": "2024-09-09T20:41:07.730045Z",
     "shell.execute_reply": "2024-09-09T20:41:07.729138Z"
    },
    "papermill": {
     "duration": 0.022129,
     "end_time": "2024-09-09T20:41:07.732125",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.709996",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# test_ids = np.array(test['Id'])\n",
    "# test_ids.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "9ca26d6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.763111Z",
     "iopub.status.busy": "2024-09-09T20:41:07.762513Z",
     "iopub.status.idle": "2024-09-09T20:41:07.766643Z",
     "shell.execute_reply": "2024-09-09T20:41:07.765685Z"
    },
    "papermill": {
     "duration": 0.021796,
     "end_time": "2024-09-09T20:41:07.768629",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.746833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# submission_df = pd.DataFrame({\n",
    "#     'Id': test_ids,\n",
    "#     'SalePrice': final_preds[:, 0]\n",
    "# })\n",
    "\n",
    "# submission_df.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9cf2d51",
   "metadata": {
    "papermill": {
     "duration": 0.014371,
     "end_time": "2024-09-09T20:41:07.797643",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.783272",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Improvement & Iteration"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe1eb195",
   "metadata": {
    "papermill": {
     "duration": 0.014445,
     "end_time": "2024-09-09T20:41:07.826740",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.812295",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Impact of Financial Crisis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7fee3ecf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.857492Z",
     "iopub.status.busy": "2024-09-09T20:41:07.857076Z",
     "iopub.status.idle": "2024-09-09T20:41:07.861368Z",
     "shell.execute_reply": "2024-09-09T20:41:07.860435Z"
    },
    "papermill": {
     "duration": 0.022034,
     "end_time": "2024-09-09T20:41:07.863381",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.841347",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# df['YrSold'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "2a9dd043",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.895336Z",
     "iopub.status.busy": "2024-09-09T20:41:07.894935Z",
     "iopub.status.idle": "2024-09-09T20:41:07.899027Z",
     "shell.execute_reply": "2024-09-09T20:41:07.898118Z"
    },
    "papermill": {
     "duration": 0.021989,
     "end_time": "2024-09-09T20:41:07.900942",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.878953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# priceYear = df.loc[:,['YrSold','SalePrice']]\n",
    "# avgPriceYear = priceYear.groupby('YrSold')['SalePrice'].mean()\n",
    "# avgPriceYear"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5752b39b",
   "metadata": {
    "papermill": {
     "duration": 0.014463,
     "end_time": "2024-09-09T20:41:07.930200",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.915737",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Its pretty clear that there was a break in trend around 2008, which coincides with the financial crisis and subsequent housing crash. Below, I will try to figure out exactly which month this break occurred."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "e164961e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:07.961251Z",
     "iopub.status.busy": "2024-09-09T20:41:07.960481Z",
     "iopub.status.idle": "2024-09-09T20:41:07.964622Z",
     "shell.execute_reply": "2024-09-09T20:41:07.963671Z"
    },
    "papermill": {
     "duration": 0.021818,
     "end_time": "2024-09-09T20:41:07.966673",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.944855",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# priceYearMonth = df.loc[:,['YrSold','MoSold','SalePrice']]\n",
    "# avgPriceYearMonth = priceYearMonth.groupby(['YrSold','MoSold'])['SalePrice'].mean()\n",
    "# avgPriceYearMonth"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb6990f7",
   "metadata": {
    "papermill": {
     "duration": 0.014231,
     "end_time": "2024-09-09T20:41:07.995600",
     "exception": false,
     "start_time": "2024-09-09T20:41:07.981369",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Partial Dependence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "8e6b2594",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:08.026825Z",
     "iopub.status.busy": "2024-09-09T20:41:08.026055Z",
     "iopub.status.idle": "2024-09-09T20:41:08.030329Z",
     "shell.execute_reply": "2024-09-09T20:41:08.029363Z"
    },
    "papermill": {
     "duration": 0.022041,
     "end_time": "2024-09-09T20:41:08.032373",
     "exception": false,
     "start_time": "2024-09-09T20:41:08.010332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# from sklearn.inspection import PartialDependenceDisplay\n",
    "# PartialDependenceDisplay.from_estimator(m, valid_xs, ['YrSold','MoSold'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "2b34c2ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:08.063179Z",
     "iopub.status.busy": "2024-09-09T20:41:08.062542Z",
     "iopub.status.idle": "2024-09-09T20:41:08.066844Z",
     "shell.execute_reply": "2024-09-09T20:41:08.065943Z"
    },
    "papermill": {
     "duration": 0.021941,
     "end_time": "2024-09-09T20:41:08.068794",
     "exception": false,
     "start_time": "2024-09-09T20:41:08.046853",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# df['SalePrice'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "4cb5c423",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:08.099394Z",
     "iopub.status.busy": "2024-09-09T20:41:08.098944Z",
     "iopub.status.idle": "2024-09-09T20:41:08.103086Z",
     "shell.execute_reply": "2024-09-09T20:41:08.102275Z"
    },
    "papermill": {
     "duration": 0.021731,
     "end_time": "2024-09-09T20:41:08.105136",
     "exception": false,
     "start_time": "2024-09-09T20:41:08.083405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# df['Crisis'] = (df['YrSold'] >= 2009)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "e8b0d6bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:08.135653Z",
     "iopub.status.busy": "2024-09-09T20:41:08.135289Z",
     "iopub.status.idle": "2024-09-09T20:41:08.139488Z",
     "shell.execute_reply": "2024-09-09T20:41:08.138532Z"
    },
    "papermill": {
     "duration": 0.021791,
     "end_time": "2024-09-09T20:41:08.141557",
     "exception": false,
     "start_time": "2024-09-09T20:41:08.119766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# cont,cat = cont_cat_split(df, 1, dep_var='SalePrice')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "659da2ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:08.171918Z",
     "iopub.status.busy": "2024-09-09T20:41:08.171559Z",
     "iopub.status.idle": "2024-09-09T20:41:08.175697Z",
     "shell.execute_reply": "2024-09-09T20:41:08.174784Z"
    },
    "papermill": {
     "duration": 0.021499,
     "end_time": "2024-09-09T20:41:08.177625",
     "exception": false,
     "start_time": "2024-09-09T20:41:08.156126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# tdf_2 = TabularPandas(df, procs, cat, cont, y_names='SalePrice', splits=splits)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "1091b582",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:08.208318Z",
     "iopub.status.busy": "2024-09-09T20:41:08.207915Z",
     "iopub.status.idle": "2024-09-09T20:41:08.212222Z",
     "shell.execute_reply": "2024-09-09T20:41:08.211229Z"
    },
    "papermill": {
     "duration": 0.022017,
     "end_time": "2024-09-09T20:41:08.214243",
     "exception": false,
     "start_time": "2024-09-09T20:41:08.192226",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# xs_2,y_2 = tdf_2.train.xs, tdf_2.train.y\n",
    "# valid_xs_2,valid_y_2 = tdf_2.valid.xs, tdf_2.valid.y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "9b50311b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:08.244990Z",
     "iopub.status.busy": "2024-09-09T20:41:08.244616Z",
     "iopub.status.idle": "2024-09-09T20:41:08.248788Z",
     "shell.execute_reply": "2024-09-09T20:41:08.247919Z"
    },
    "papermill": {
     "duration": 0.021858,
     "end_time": "2024-09-09T20:41:08.250813",
     "exception": false,
     "start_time": "2024-09-09T20:41:08.228955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# m_2 = rf(xs_2,y_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "5613451b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:08.282279Z",
     "iopub.status.busy": "2024-09-09T20:41:08.281872Z",
     "iopub.status.idle": "2024-09-09T20:41:08.285745Z",
     "shell.execute_reply": "2024-09-09T20:41:08.284725Z"
    },
    "papermill": {
     "duration": 0.021647,
     "end_time": "2024-09-09T20:41:08.287674",
     "exception": false,
     "start_time": "2024-09-09T20:41:08.266027",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# fi = rf_feat_importance(m_2, xs_2)\n",
    "# fi[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "88b94e0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T20:41:08.319540Z",
     "iopub.status.busy": "2024-09-09T20:41:08.318587Z",
     "iopub.status.idle": "2024-09-09T20:41:08.322864Z",
     "shell.execute_reply": "2024-09-09T20:41:08.322073Z"
    },
    "papermill": {
     "duration": 0.02255,
     "end_time": "2024-09-09T20:41:08.324930",
     "exception": false,
     "start_time": "2024-09-09T20:41:08.302380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# fi[fi['cols'] == 'Crisis']"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 868283,
     "sourceId": 5407,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 40.224187,
   "end_time": "2024-09-09T20:41:09.863615",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-09T20:40:29.639428",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
